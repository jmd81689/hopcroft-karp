# Set the following values as appropriate for your hardware thread

# VHDL source files ( in the correct evaluation order! )
VHDL_FILES=bubble_sorter.vhd sort8k.vhd
# netlist files needed by your thread (.edn or .ngc)
NETLIST_FILES=
# Name of the thread's top entity
USER_LOGIC_ENTITY=sort8k
# Target architecture
ARCHITECTURE=virtex6
# HW thread generics (make sure the thread's VHDL supports them)
GENERICS=
# HW thread wrapper parameters (e.g. "C_REGISTER_OSIF_PORTS = 1")
# note the different notation from generics ('=' instead of '=>'),
# as parameters will be set within a .MHS file
WRAPPER_PARAMETERS=

######### NO CHANGES NECESSARY BEYOND THIS LINE ###########

MKHWTHREAD=$(RECONOS)/tools/python/mkhwthread.py
MKPRMHS=$(RECONOS)/tools/python/mkprmhs.py
PLATGEN=platgen
THREAD_PCORE_PREFIX=hw_task_v1_0
THREAD_PCORE_SUFFIX=_b
THREAD_PCORE=$(THREAD_PCORE_PREFIX)1$(THREAD_PCORE_SUFFIX)
CORE_PCORES=reconos_$(RECONOS_VER) burst_ram_$(RECONOS_VER)

QUIET_MKHWTHREAD=  echo "    MKHWTHREAD  $@"; $(MKHWTHREAD)
QUIET_MKPRMHS=     echo "    MKPRMHS     $@"; $(MKPRMHS)
QUIET_PLATGEN=     echo "    PLATGEN     $@"; $(PLATGEN)

ifeq ($(NUM_DYNAMIC_OSIFS),)
    $(error Number of dynamic OSIFs unknown. Specify NUM_DYNAMIC_OSIFS)
endif

ifeq ($(GENERICS),)
	GENERIC_STMT=
else
	GENERIC_STMT=-g $(GENERICS)
endif

ifeq ($(WRAPPER_PARAMETERS),)
	WRAPPER_PARAMETER_STMT=
else
	WRAPPER_PARAMETER_STMT=-p $(WRAPPER_PARAMETERS)
endif

all: hwthread

clean:
	$(Q)rm -f platgen.log platgen.opt system.mhs
	$(Q)rm -rf hdl implementation synthesis pcores
	$(Q)rm -rf hw_task_v1_*_b
	$(Q)rm -f hw_task_*.ngc

$(THREAD_PCORE_PREFIX)%$(THREAD_PCORE_SUFFIX): 
	$(Q)$($(QQ)MKHWTHREAD) $(GENERIC_STMT) $(USER_LOGIC_ENTITY) $(subst $(THREAD_PCORE_SUFFIX),,$(subst $(THREAD_PCORE_PREFIX),,$@)) $(VHDL_FILES) $(NETLIST_FILES) >> make.log

hwthread: clean $(THREAD_PCORE)
	$(Q)mkdir pcores
	$(Q)cd pcores && ln -s ../$(THREAD_PCORE) .
	$(Q)cd pcores && for z in $(CORE_PCORES); do \
	    ln -s $(RECONOS)/core/pcores/$$z . ;\
	done
	$(Q)$($(QQ)MKPRMHS) $(WRAPPER_PARAMETER_STMT) 1 $(NUM_DYNAMIC_OSIFS) > system.mhs
	$(Q)$($(QQ)PLATGEN) -lp $$(pwd) -p $(ARCHITECTURE) system.mhs >> make.log
	